@model CheckoutBillingAddressModel
@{
    Model.ShipToSameAddressAllowed = true;
    Model.ShipToSameAddress = true;
}
<div class="onepage-checkout-billing-address">
    @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_top" })
    @if (Model.ShipToSameAddressAllowed)
    {

        <input type="hidden" asp-for="ShipToSameAddress" class="custom-control-input" />

    }

    @if (Model.ExistingAddresses.Any())
    {
        <div class="mb-3">
            <label class="form-label">Selecione um endereço ou cadastre um novo</label>
            <select name="billing_address_id" id="billing-address-select" class="form-select"
                    title="" onchange="Billing.newAddress(!this.value)">
                @foreach (var address in Model.ExistingAddresses)
                {
                    var addressLine = "";
                    addressLine += address.FirstName;
                    addressLine += " " + address.LastName;
                    if (address.StreetAddressEnabled && !String.IsNullOrEmpty(address.Address1))
                    {
                        addressLine += ", " + address.Address1;
                    }
                    if (address.CityEnabled && !String.IsNullOrEmpty(address.City))
                    {
                        addressLine += ", " + address.City;
                    }
                    if (address.StateProvinceEnabled && !String.IsNullOrEmpty(address.StateProvinceName))
                    {
                        addressLine += ", " + address.StateProvinceName;
                    }
                    if (address.ZipPostalCodeEnabled && !String.IsNullOrEmpty(address.ZipPostalCode))
                    {
                        addressLine += " " + address.ZipPostalCode;
                    }
                    if (address.CountryEnabled && !String.IsNullOrWhiteSpace(address.CountryName))
                    {
                        addressLine += ", " + address.CountryName;
                    }
                    //how should we render "FormattedCustomAddressAttributes" here?
                    <option value="@(address.Id)">@(addressLine)</option>
                }
                <option value="" selected="@Model.NewAddressPreselected">@T("Checkout.NewAddress")</option>
            </select>
        </div>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_middle" })
    <div class="new-billing-address" id="billing-new-address-form">
        <div class="enter-address">
            @{
                var dataDictAddress = new ViewDataDictionary(ViewData);
                dataDictAddress.TemplateInfo.HtmlFieldPrefix = "BillingNewAddress";
                <partial name="_CreateOrUpdateAddress" model="Model.NewAddress" view-data="dataDictAddress" />
            }
            <div asp-validation-summary="ModelOnly" class="message-error"></div>
        </div>
    </div>
    @await Component.InvokeAsync("Widget", new { widgetZone = "op_checkout_billing_address_bottom" })
</div>