@model ProductOverviewModel
@inject Grand.Services.Configuration.ISettingService _settings

@{
    // Free shipping
    var freeShippingFlagActive = _settings.GetSettingByKey<bool>("owl.grand.plugin.shipping.melhorenvio.freeshippingflagactive");
    var freeShippingBadge = string.Empty;

    //prepare "Add to cart" AJAX link
    string addtocartlink = "";
    string addtowishlistlink = "";
    string quickviewurl = Url.RouteUrl("QuickView-Product", new { productId = Model.Id });

    var shoppingCartTypeId = (int)ShoppingCartType.ShoppingCart;
    var quantity = 1;

    if (!Model.ShowQty)
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, quantity = quantity });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist, quantity = quantity });
    }
    else
    {
        if (Model.ProductPrice.ForceRedirectionAfterAddingToCart)
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId, forceredirection = Model.ProductPrice.ForceRedirectionAfterAddingToCart });
        }
        else
        {
            addtocartlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = shoppingCartTypeId });
        }
        addtowishlistlink = Url.RouteUrl("AddProductToCart-Catalog", new { productId = Model.Id, shoppingCartTypeId = (int)ShoppingCartType.Wishlist });
    }
    var addtocomparelink = Url.RouteUrl("AddProductToCompare", new { productId = Model.Id });

    // Verify free shipping
    if (freeShippingFlagActive && !string.IsNullOrEmpty(Model.Flag) && Model.Flag.Contains("free-shipping"))
    {
        freeShippingBadge = "Frete Grátis";

        var flagSplitted = Model.Flag.Split(';');
        foreach(var flag in flagSplitted)
        {
            if(flag.Contains("free-shipping"))
            {
                var individualFlagSplitted = flag.Split(':');
                if(individualFlagSplitted.Length > 1)
                {
                    var states = individualFlagSplitted[1];
                    freeShippingBadge += " para " + string.Join(", ", states.Split(','));
                }
            }
        }
    }
}

@await Component.InvokeAsync("Widget", new { widgetZone = "productbox_before_content", additionalData = Model})
<div class="product-box-fixed-size animation lazyload text-center">
    <a class="d-block" href="@Url.RouteUrl("Product", new { SeName = Model.SeName })">
        <div class="square-box">
            <div class="square-content">
                <picture>
                    <source media="(max-width: 767px)" picture-id="@Model.DefaultPictureModel.Id" picture-size="400" />
                    <source media="(max-width: 575px)" picture-id="@Model.DefaultPictureModel.Id" picture-size="300" />
                    <source media="(max-width: 420px)" picture-id="@Model.DefaultPictureModel.Id" picture-size="200" />
                    <img class="img-fluid product-picture top-50 start-50 translate-middle animate-short" src="@Model.DefaultPictureModel.ImageUrl" />
                </picture>
            </div>
        </div>
        <h5>@Model.Name</h5>
    </a>

    <!-- Badges -->
    <div class="badge-container position-absolute top-0">
        <div class="badges d-flex flex-column align-items-start">
            @if (!Model.ProductPrice.DisableBuyButton && !string.IsNullOrEmpty(freeShippingBadge))
            {
                <div class="badge bg-success mt-2">
                    @freeShippingBadge
                </div>
            }

            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                <div class="badge bg-danger mt-2">
                    -@(Convert.ToInt32((1 - Model.ProductPrice.PriceValue / Model.ProductPrice.OldPriceValue) * 100))%
                </div>
            }

            @if (Model.ProductPrice.DisableBuyButton)
            {

                <div class="badge bg-light text-dark mt-2">
                    Indisponível
                </div>
            }


        </div>
    </div>
    <!-- Side buttons -->
    <div class="action-side position-absolute top-0 end-0 animate-short overflow-hidden d-flex flex-column">
        <button class="btn btn-rounded position-relative mb-2" onclick="AjaxCart.addproducttocart_catalog('@addtowishlistlink', '@Model.ShowQty', '@Model.Id');return false;">
            <span class="icon iconify position-absolute top-50 start-50 translate-middle" data-icon="bi:heart"></span>
        </button>
        <button class="btn btn-rounded position-relative mb-2" data-toggle="modal" data-target="ModalQuickView" onclick="AjaxCart.quickview_product('@quickviewurl'); return false;">
            <span class="icon iconify position-absolute top-50 start-50 translate-middle" data-icon="bi:eye"></span>
        </button>
    </div>

    <!-- Bottom Buttons -->
    <div class="action-main">
        <div class="prices d-flex justify-content-center flex-wrap align-items-center @if (Model.ProductType == ProductType.Reservation) { <text>reservation-price</text> } ">
            @if (!String.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                <span class="text-muted text-decoration-line-through me-2">
                    @Model.ProductPrice.OldPrice
                </span>
            }
            @if (Model.ProductType != ProductType.Auction)
            {
                <span class="">
                    @Model.ProductPrice.Price
                </span>
            }
            else
            {
                <span class="">
                    @(Model.ProductPrice.HighestBidValue > 0 ? Model.ProductPrice.HighestBid : Model.ProductPrice.StartPrice)
                </span>
            }
            @if (!string.IsNullOrEmpty(Model.ProductPrice.OldPrice))
            {
                <span class="discount-legend w-100 text-center">
                    economia de @(Convert.ToInt32((1 - Model.ProductPrice.PriceValue / Model.ProductPrice.OldPriceValue) * 100))%
                </span>
            }
        </div>
        <div class="buy-button">
            @if (!Model.ProductPrice.DisableBuyButton)
            {
                var addToCartText = "Comprar";
                if (Model.ProductType == ProductType.Reservation)
                {
                    addToCartText = T("ShoppingCart.Reservation").Text;
                }
                if (Model.ProductPrice.AvailableForPreOrder)
                {
                    addToCartText = T("ShoppingCart.PreOrder").Text;
                }
                <button type="button" class="justify-content-center text-uppercase" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', '@Model.ShowQty', '@Model.Id');return false;">
                    <span>@(addToCartText)</span>
                    <span class="visually-hidden">AddToCart</span>
                </button>
            }
            else
            {
                <button type="button" class="justify-content-center text-uppercase" disabled>
                    <span>Indisponível</span>
                </button>

                if (Model.ProductType == ProductType.Auction)
                {
                    var addToCartText = T("ShoppingCart.Bids").Text;
                    <button type="button" class="justify-content-center" onclick="AjaxCart.addproducttocart_catalog('@addtocartlink', 'false', '@Model.Id');return false;">
                        <span>@(addToCartText)</span>
                        <span class="visually-hidden">AddToCart</span>
                    </button>
                }
            }
        </div>
    </div>
</div>