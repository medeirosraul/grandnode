@model ShoppingCartModel
@inject IWebHelper webHelper
@inject IWorkContext workContext

<div class="order-summary" id="ordersummarypagecart">
    @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_before" })
    @if (Model.OrderReviewData.Display)
    {
        <partial name="_OrderReviewData" model="Model.OrderReviewData" />
    }

    <!-- Title -->
    @if (Model.Items.Count > 0)
    {
        @if (Model.Items.Count == 1)
        {
            <h2 class="generalTitle text-center mt-3">1 item</h2>
        }
        else
        {
            <h2 class="generalTitle text-center mt-3">@Model.Items.Count itens</h2>
        }
    }
    else
    {
        <h2 class="generalTitle text-center mt-3">Seu carrinho está vazio.</h2>
    }

    <!-- Form -->
    @if (Model.Items.Any())
    {
        <!-- Google Ecommerce -->
        <script>
            if (typeof productItems == 'undefined') {
                productItems = new Array();
            }
        </script>
        <!-- End Google Ecommerce -->
        <form asp-route="ShoppingCart" class="row" method="post" enctype="multipart/form-data" id="shopping-cart-form">
            @if (Model.Warnings.Any())
            {
                <div class="message-error">
                    <ul>
                        @foreach (var warning in Model.Warnings)
                        {
                            <li>@warning</li>
                        }
                    </ul>
                </div>
            }
            <div class="cart-options">
                <div class="row">
                    @if (Model.IsEditable)
                    {
                        <div class="col-12 col-md-6 checkoutAttributes">
                            <partial name="_CheckoutAttributes" model="Model.CheckoutAttributes" />
                        </div>
                    }
                    <div class="selected-checkout-attributes col-sm-3 col-md-6 col-12 ml-auto justify-content-end text-right mt-3">
                        @if (!String.IsNullOrEmpty(Model.CheckoutAttributeInfo))
                        {
                            @Html.Raw(Model.CheckoutAttributeInfo)
                        }
                    </div>
                </div>
            </div>
            <!-- Product list -->
            <div class="order-products col-12 col-lg-8 mb-2">
                @if (Model.Items.Any())
                {
                    <script>
                        addQuantity = (id, q) => {
                            var actualValue = +$('#' + id).val();
                            var targetValue = actualValue + q;
                            if (targetValue < 1) return;

                            $('#' + id).val(targetValue);
                            $('#' + id).trigger('change');
                        }
                    </script>
                    foreach (var item in Model.Items)
                    {
                        <!-- Google Ecommerce -->
                        <script>
                            productItems.push({
                                'item_name': '@item.ProductName',
                                'item_id': '@item.Id',
                                'item_price': '@item.UnitPriceValue.ToString("F2", System.Globalization.CultureInfo.InvariantCulture)',
                                'quantity': @item.Quantity
                            })
                        </script>
                        <!-- End Google Ecommerce -->

                        <div class="row">
                            <div class="picture col-auto d-flex align-items-center">
                                <div class="square-box">
                                    <div class="square-content">
                                        <a href="@Url.RouteUrl("Product", new { SeName=item.ProductSeName })">
                                            <img class="img-fluid product-picture top-50 start-50 translate-middle position-absolute"
                                                 src="@item.Picture.ImageUrl"
                                                 title="@item.Picture.Title"
                                                 alt="@item.Picture.AlternateText" />
                                        </a>
                                    </div>
                                </div>
                            </div>
                            <div class="col mt-3">
                                @if (item.Warnings.Any())
                                {
                                    <div class="message-error">
                                        <ul>
                                            @foreach (var warning in item.Warnings)
                                            {
                                                <li>@warning</li>
                                            }
                                        </ul>
                                    </div>
                                }
                                <h5>@item.ProductName</h5>
                                <p class="text-muted">
                                    @item.UnitPrice
                                    @if (item.UnitPriceWithoutDiscountValue != item.UnitPriceValue && item.UnitPriceWithoutDiscountValue > 0)
                                    {
                                        <span class="ms-2 text-danger text-decoration-line-through">@item.UnitPriceWithoutDiscount</span>
                                    }
                                </p>
                            </div>
                            <div class="col-12 col-sm-auto">
                                <div class="d-flex align-items-center justify-content-end w-100 mt-sm-2">
                                    @if (Model.IsEditable)
                                    {
                                        if (item.AllowedQuantities.Count > 0)
                                        {
                                            <select id="itemquantity@(item.Id)" name="itemquantity@(item.Id)" class="custom-select form-control qty-dropdown" onchange="ChangeShoppingCart()">
                                                @foreach (var qty in item.AllowedQuantities)
                                                {
                                                    <option id="itemqty@(item.Id)" selected="@qty.Selected" value="@qty.Value">@qty.Value</option>
                                                }
                                            </select>
                                        }
                                        else
                                        {
                                            var quantityId = $"itemquantity{item.Id}";
                                            <div class="input-group quantity col-auto">
                                                <button type="button" onclick="addQuantity('@quantityId',-1)">
                                                    <span class="icon-sm iconify" data-icon="bi:dash"></span>
                                                </button>
                                                <input id="@quantityId" name="@quantityId" class="text-center" type="number" value="@item.Quantity" inputmode="numeric" onchange="ChangeShoppingCart()" />
                                                <button type="button" onclick="addQuantity('@quantityId', 1)">
                                                    <span class="icon-sm iconify" data-icon="bi:plus"></span>
                                                </button>
                                            </div>
                                        }

                                        <button class="btn-rounded small ms-3 remove-item" data-href="@Url.RouteUrl("DeleteCartItem", new { id = item.Id, shoppingcartpage = true })" type="button"><span class="icon-sm iconify" data-icon="bi:x"></span></button>

                                    }
                                    else
                                    {
                                        var quantityId = $"itemquantity{item.Id}";
                                        <div class="col-auto quantity me-5 d-flex justify-content-center">
                                            <input id="@quantityId" name="@quantityId" class="text-center rounded-2 bg-white" type="number" value="@item.Quantity" inputmode="numeric" disabled />
                                        </div>
                                    }

                                </div>
                                <div class="pe-5 mt-2">
                                    <div class="subtotal text-end">
                                        @item.SubTotal
                                    </div>
                                    @if (!string.IsNullOrEmpty(item.Discount))
                                    {
                                        <div class="discount text-end">
                                            <span class="text-success small">economia de @item.Discount</span>
                                        </div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                }
                @if (Model.IsEditable)
                {
                    <div class="d-flex justify-content-between mt-2">
                        <button type="button" onclick="setLocation('@(Url.RouteUrl("ClearCart"))')" class="btn theme-btn theme-btn-danger rounded">
                            <span class="icon-sm iconify" data-icon="bi:trash"></span>
                            @T("shoppingcart.clearcart")
                        </button>
                        <button type="button" onclick="setLocation('@(Url.RouteUrl("ContinueShopping"))')" class="btn theme-btn-primary rounded">
                            @T("shoppingcart.continueshopping")
                        </button>
                    </div>
                }
            </div>
            <div class="col-12 col-lg-4 p-0">
                @if (Model.IsEditable)
                {

                    @if (Model.GiftCardBox.Display || Model.DiscountBox.Display)
                    {
                        <div class="col-12 collateral mb-4">
                            <partial name="_GiftCardBox" model="Model.GiftCardBox" />
                            <partial name="_DiscountBox" model="Model.DiscountBox" />
                            @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_deals" })
                        </div>
                    }
                    <div class="col-12 collateral mb-4">
                        @await Component.InvokeAsync("EstimateShipping")
                    </div>

                }

                <div class="col-12 collateral">
                    @await Component.InvokeAsync("OrderTotals", new { isEditable = Model.IsEditable })
                </div>

                @if (Model.IsEditable)
                {
                    if (!String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
                    {
                        <div class="card text-white card-danger text-center min-amount-warning">
                            <div class="card-body p-3">
                                <blockquote class="card-bodyquote mb-0">
                                    <span>@Model.MinOrderSubtotalWarning</span>
                                </blockquote>
                            </div>
                        </div>
                    }
                    <div class="d-flex justify-content-end mt-4">
                        @if (Model.ShowCheckoutAsGuestButton)
                        {
                            <button type="button" id="checkoutasguest" class="btn btn-secondary checkout-as-guest-button mr-1">
                                @T("Account.Login.CheckoutAsGuest")
                            </button>
                        }
                        <button type="button" id="checkout" name="checkout" value="checkout" class="btn theme-btn-primary checkout-button ms-2">
                            @if (Model.IsGuest)
                            {
                                <span class="icon-sm iconify" data-icon="bi:person"></span>
                                @T("Checkout.Button.Login")
                            }
                            else
                            {
                                <span class="icon-sm iconify" data-icon="bi:credit-card"></span>
                                @T("Checkout.Button")
                            }
                        </button>
                    </div>
                }
            </div>

            @await Component.InvokeAsync("Widget", new { widgetZone = "order_summary_content_after" })
        </form>

        <!-- Google Ecommerce-->
        <script>
            // Utilities
            function createGuid() {
                function S4() {
                    return (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);
                }
                return (S4() + S4() + "-" + S4() + "-4" + S4().substr(0, 3) + "-" + S4() + "-" + S4() + S4() + S4()).toLowerCase();
            }

            $(document).ready(() => {
                $('.confirm-order-next-step-button').on('click', () => {
                    var total = $('.total .value-summary strong')[0].innerHTML.replace('R$ ', '').replace(',', '.');
                    dataLayer.push({
                        'event': 'purchase',
                        'ecommerce': {
                            'purchase': {
                                'transaction_id': createGuid(),
                                'value': total,
                                'currency': 'BRL',
                                'items': productItems
                            }
                        }
                    });

                    fbq('track', 'Purchase', { currency: 'BRL', value: { total } });
                });
            });
        </script>
        <!-- End Google Ecommerce-->
    }
</div>

@if (String.IsNullOrEmpty(Model.MinOrderSubtotalWarning))
{
    <script asp-location="Footer">
        $(document).ready(function () {
            function checkTermOfService() {
                var termOfServiceOk = true;
                if ($('#termsofservice').length > 0) {
                    //terms of service element exists
                    if (!$('#termsofservice').is(':checked')) {
                        $("#ModalConditionsOfUse").modal('show');
                        $("body").removeAttr("style");
                        $(".navUp").removeAttr("style");
                        termOfServiceOk = false;
                    } else {
                        termOfServiceOk = true;
                    }
                }
                return termOfServiceOk;
            }
            $('#checkoutasguest').click(function () {
                //terms of service
                if (checkTermOfService()) {
                    location.href='@Url.RouteUrl("Checkout")'
                }
            });
            $('#checkout').click(function (e) {
                //terms of service
                if (checkTermOfService()) {
                    $('#shopping-cart-form').attr('action', '@Url.RouteUrl("StartCheckout")');
                    $("#shopping-cart-form").submit();
                    e.preventDefault();
                }
            });
        });
    </script>

}

<script asp-location="Footer">

    function ChangeShoppingCart() {
            $.ajax({
                cache: false,
                type: "POST",
                data: $('#shopping-cart-form').serialize(),
                url: '@Url.RouteUrl("UpdateCart")',
                success: function (data) {
                    $(AjaxCart.flyoutcartselector).replaceWith(data.flyoutshoppingcart);
                    $(AjaxCart.topcartselector).html(data.totalproducts);
                    $('#ordersummarypagecart').replaceWith(data.cart);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Shopping Cart Page.');
                }
            });
        }

    $(document).ready(function () {
        $(".remove-item").click(function () {
            var href = $(this).closest('[data-href]').data('href');
            $.ajax({
                cache: false,
                type: "POST",
                url: href,
                success: function (data) {
                    $(AjaxCart.flyoutcartselector).replaceWith(data.flyoutshoppingcart);
                    $(AjaxCart.topcartselector).html(data.totalproducts);
                    $('#ordersummarypagecart').replaceWith(data.cart);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Shopping Cart Page.');
                }
            });
        });
        $(".changeshoppingcartitem").click(function () {
            var href = $(this).closest('[data-href]').data('href');
            $.ajax({
                cache: false,
                type: "POST",
                url: href,
                success: function (data) {
                    $('#ordersummarypagecart').replaceWith(data.cart);
                },
                error: function (xhr, ajaxOptions, thrownError) {
                    alert('Failed to retrieve Shopping Cart Page.');
                }
            });
        });
    });
</script>

